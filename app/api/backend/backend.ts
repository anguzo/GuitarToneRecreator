/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import { customAxios } from '../custom-axios';
import type { ErrorType } from '../custom-axios';
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Read Root
 */
export const readRootGet = (
    
 options?: SecondParameter<typeof customAxios>,signal?: AbortSignal
) => {
      
      
      return customAxios<unknown>(
      {url: `/`, method: 'GET', signal
    },
      options);
    }
  

export const getReadRootGetQueryKey = () => {
    return [`/`] as const;
    }

    
export const getReadRootGetQueryOptions = <TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({ signal }) => readRootGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadRootGetQueryResult = NonNullable<Awaited<ReturnType<typeof readRootGet>>>
export type ReadRootGetQueryError = ErrorType<unknown>


export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          Awaited<ReturnType<typeof readRootGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customAxios>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof readRootGet>>,
          TError,
          Awaited<ReturnType<typeof readRootGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customAxios>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Root
 */

export function useReadRootGet<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadRootGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getReadRootGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getReadRootGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof readRootGet>>> = ({ signal }) => readRootGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ReadRootGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof readRootGet>>>
export type ReadRootGetSuspenseQueryError = ErrorType<unknown>


export function useReadRootGetSuspense<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGetSuspense<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useReadRootGetSuspense<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read Root
 */

export function useReadRootGetSuspense<TData = Awaited<ReturnType<typeof readRootGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof readRootGet>>, TError, TData>>, request?: SecondParameter<typeof customAxios>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getReadRootGetSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
